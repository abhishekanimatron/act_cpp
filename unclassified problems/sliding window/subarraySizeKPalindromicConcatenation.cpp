// Given an array arr[], consisting of N integers in the range [0, 9], the task is to find a subarray of length K from which we can generate a number which is a Palindrome Number. If no such subarray exists, print -1.

// Note: The elements in the array are in the range of 0 to 10.

//* Example
// Input: arr[] = {1, 5, 3, 2, 3, 5, 4}, K = 5
// Output: 5, 3, 2, 3, 5
// Explanation:
// Number generated by concatenating all elements of the subarray, i.e. 53235, is a palindrome.

// ? Approach
// Approach: The problem can be solved using the Window-Sliding technique. Follow the steps below to solve the problem:

// Make a palindrome function to check if the given subarray (Window-Sliding) is palindrome or not.
// Iterate over the array, and for each subarray call the palindrome function.
// If found to be true, return the starting index of that subarray, and print the array from starting index to the next k index.
// If no such subarray found which is a palindrome, print -1

#include <iostream>
#include <vector>
#include <cmath>
using namespace std;
// returns true if given number is palindrome
bool palindrome(int n)
{
    int temp = n;
    int number = 0;

    while (temp > 0)
    {
        number = number * 10 + temp % 10;
        temp = temp / 10;
    }
    if (number == n)
        return true;
    return false;
}

// returns index of starting set of numbers which is palindrom when taken upto index + k
int palindromeSubarray(vector<int> arr, int k)
{
    int num = 0;
    // take first set of k numbers from array and contenate them to form a number
    for (int i = 0; i < k; i++)
        num = num * 10 + arr[i];
    // if this first set is already palindrome, return 0, first index, indicating this set is palindrome
    if (palindrome(num))
        return 0;
    for (int i = 0; i < arr.size(); i++)
    {
        num = (num % (int)pow(10, k - 1)) * 10 + arr[i];
        // if this set is already palindrome, return first index, indicating this set is palindrome
        if (palindrome(num))
            return i - k + 1;
    }
    //  if reached here, no palindrome exists, return -1s
    return -1;
}

int main()
{
    vector<int> arr = {2, 3, 5, 1, 1, 5};
    int k = 4;
    int ans = palindromeSubarray(arr, k);
    if (ans == -1)
        cout << "Doesn't exist\n";
    else
    {
        for (int i = ans; i < ans + k; i++)
            cout << arr[i] << " ";
        // 5 1 1 5
        cout << "\n";
    }
}